# k8s/deployment.yaml
# Placeholder Kubernetes Deployment for RetroIDE Frontend

apiVersion: apps/v1
kind: Deployment
metadata:
  name: retroide-frontend-deployment
  labels:
    app: retroide-frontend
spec:
  replicas: 2 # Example: Start with 2 replicas
  selector:
    matchLabels:
      app: retroide-frontend
  template:
    metadata:
      labels:
        app: retroide-frontend
    spec:
      containers:
      - name: retroide-frontend
        image: your-dockerhub-username/retroide-frontend:latest # Replace with your image registry path
        ports:
        - containerPort: 9002
        env:
          # Option 1: Load from Secrets and ConfigMaps
          - name: NODE_ENV
            value: "production"
          - name: PORT
            value: "9002"
          - name: HOSTNAME
            value: "0.0.0.0"
          - name: GOOGLE_GENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: retroide-secrets # Assumes a Secret named 'retroide-secrets' exists
                key: google-genai-api-key
          - name: OLLAMA_BASE_URL
            valueFrom:
              configMapKeyRef:
                name: retroide-config # Assumes a ConfigMap named 'retroide-config' exists
                key: ollama-base-url
          - name: REDIS_URL
            valueFrom:
              configMapKeyRef:
                name: retroide-config
                key: redis-url
          - name: COLLABORATION_SERVICE_URL # Use internal service name
            value: "http://retroide-collaboration-service:3001" # Assumes a Service named 'retroide-collaboration-service'
          - name: SECRETS_SERVICE_URL # Use internal service name
            value: "http://retroide-secrets-service:3002" # Assumes a Service named 'retroide-secrets-service'
          - name: NEXT_PUBLIC_COLLABORATION_WS_URL # Use Ingress host or external URL for client
            valueFrom:
              configMapKeyRef:
                name: retroide-config
                key: next-public-collaboration-ws-url
        # Add resource requests and limits
        # resources:
        #   requests:
        #     memory: "256Mi"
        #     cpu: "250m"
        #   limits:
        #     memory: "512Mi"
        #     cpu: "500m"
        # Add readiness and liveness probes
        # readinessProbe:
        #   httpGet:
        #     path: /api/health # Example health check endpoint
        #     port: 9002
        #   initialDelaySeconds: 15
        #   periodSeconds: 20
        # livenessProbe:
        #   httpGet:
        #     path: /api/health
        #     port: 9002
        #   initialDelaySeconds: 15
        #   periodSeconds: 20

# --- Placeholder Deployments for Backend Services ---
# Add similar deployments for collaboration-service, secrets-service, redis, ollama etc.
# Example for collaboration-service:
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: retroide-collaboration-deployment
#   labels:
#     app: retroide-collaboration
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: retroide-collaboration
#   template:
#     metadata:
#       labels:
#         app: retroide-collaboration
#     spec:
#       containers:
#       - name: retroide-collaboration
#         image: your-dockerhub-username/retroide-collaboration-service:latest
#         ports:
#         - containerPort: 3001
#         env:
#           - name: NODE_ENV
#             value: "production"
#           - name: PORT
#             value: "3001"
#           - name: REDIS_URL
#             valueFrom:
#               configMapKeyRef:
#                 name: retroide-config
#                 key: redis-url
# ---
